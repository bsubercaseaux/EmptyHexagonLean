import Mathlib.Data.Set.Countable
import Mathlib.Data.Real.Basic
import Mathlib.Data.Set.Intervals.IsoIoo
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan
import Geo.SymmetryBreaking

namespace Geo
noncomputable section

def Matrix.rotateBy (Œ∏ : ‚Ñù) : Matrix (Fin 2) (Fin 2) ‚Ñù :=
  !![Real.cos Œ∏, -Real.sin Œ∏; Real.sin Œ∏, Real.cos Œ∏]

def rotationMap (Œ∏ : ‚Ñù) : Point ‚Üí‚Çó[‚Ñù] Point :=
  Matrix.toEuclideanLin (Matrix.rotateBy Œ∏)

def TMatrix.rotateBy (Œ∏ : ‚Ñù) : Matrix (Fin 3) (Fin 3) ‚Ñù :=
  !![Real.cos Œ∏, -Real.sin Œ∏, 0; Real.sin Œ∏, Real.cos Œ∏, 0; 0, 0, 1]

lemma abcdef (p : Point) : pt_transform p (TMatrix.rotateBy Œ∏) = rotationMap Œ∏ p :=
  sorry

open Real

lemma rotationMap_x (Œ∏ : ‚Ñù) (P : Point) : (rotationMap Œ∏ P).x = cos Œ∏ * P.x - sin Œ∏ * P.y := by
  -- such beautiful formal proofs
  simp [Matrix.vecHead, Matrix.vecTail, rotationMap, Matrix.toEuclideanLin,
    Matrix.toLin', Matrix.rotateBy, Point.x, Point.y]
  ring

lemma rotationMap_y (Œ∏ : ‚Ñù) (P : Point) : (rotationMap Œ∏ P).y = sin Œ∏ * P.x + cos Œ∏ * P.y := by
  simp [Matrix.vecHead, Matrix.vecTail, rotationMap, Matrix.toEuclideanLin,
    Matrix.toLin', Matrix.rotateBy, Point.x, Point.y]

lemma rotationMap_angle_unique (P Q : Point) : P ‚â† Q ‚Üí
    ‚àÄ Œ∏ ‚àà Set.Ioo (-(œÄ/2)) (œÄ/2), (rotationMap Œ∏ P).x = (rotationMap Œ∏ Q).x ‚Üí
      Œ∏ = Real.arctan ((P.x - Q.x) / (P.y - Q.y)) := by
  intro hne
  intro Œ∏ hŒ∏ heq
  have heq : (P.x - Q.x) * cos Œ∏ = (P.y - Q.y) * sin Œ∏ := by
    rw [rotationMap_x, rotationMap_x] at heq
    linarith
  have poscoscospos : 0 < cos Œ∏ := Real.cos_pos_of_mem_Ioo hŒ∏
  by_cases hy : P.y = Q.y
  . have : (P.x - Q.x) * cos Œ∏ = 0 := by rw [hy] at heq; linarith
    cases mul_eq_zero.mp this
    next hx =>
      exfalso
      have : P.x = Q.x := by linarith
      exact hne (Point.ext this hy)
    . linarith
  . have : P.y - Q.y ‚â† 0 := fun h => hy (by linarith)
    have : (P.x - Q.x) / (P.y - Q.y) = sin Œ∏ / cos Œ∏ := by
      field_simp [heq, div_self this, mul_comm]
    have : (P.x - Q.x) / (P.y - Q.y) = tan Œ∏ := by
      simp [this, tan_eq_sin_div_cos]
    have := congrArg arctan this
    rw [Set.mem_Ioo] at hŒ∏
    rw [arctan_tan hŒ∏.left hŒ∏.right] at this
    rw [this]

-- TODO: deduplicate
def hasDistinctX (A : Set Point) : Prop :=
  A.Pairwise (¬∑.x ‚â† ¬∑.x)

open Cardinal in
theorem rotate_the_xs_away' (A : Set Point) (h : Set.Countable A) :
    ‚àÉ (Œ∏ : ‚Ñù), hasDistinctX $ (rotationMap Œ∏)''A :=
  let badAngles := Set.image2 (fun P Q => Real.arctan ((P.x - Q.x) / (P.y - Q.y))) A A
  let goodAngles := { Œ∏ ‚àà Set.Ioo (-(œÄ/2)) (œÄ/2) | hasDistinctX $ (rotationMap Œ∏)''A }
  have sub : Set.Ioo (-(œÄ/2)) (œÄ/2) \ badAngles ‚äÜ goodAngles := by
    intro Œ∏ hŒ∏
    simp only [Set.mem_setOf_eq, Set.mem_diff, Set.mem_image2, not_exists, not_and] at hŒ∏ ‚ä¢
    have ‚ü®hInt, hArctan‚ü© := hŒ∏; clear hŒ∏

    sorry
    -- TODO(WN): Fix
    -- refine ‚ü®hInt, Set.InjOn.pairwise_ne (Set.InjOn.image_of_comp ?_)‚ü©
    -- rw [Set.InjOn]
    -- intro P hP Q hQ rotEq
    -- dsimp at rotEq
    -- by_cases hEq : P = Q
    -- . assumption
    -- . exfalso
    --   apply hArctan P hP Q hQ
    --   rw [rotationMap_angle_unique P Q hEq Œ∏ hInt rotEq]
  have cBad : Set.Countable badAngles := Set.Countable.image2 h h _
  have uInt : #(Set.Ioo (-(œÄ/2)) (œÄ/2)) = ùî† := mk_Ioo_real (neg_lt_self (by positivity))
  have uInt : ¬¨Set.Countable (Set.Ioo (-(œÄ/2)) (œÄ/2)) := by
    rw [‚Üê Cardinal.le_aleph0_iff_set_countable, uInt]
    simp [aleph0_lt_continuum]
  have uGood : ¬¨Set.Countable goodAngles := fun h =>
    have : Set.Countable (Set.Ioo (-(œÄ/2)) (œÄ/2) \ badAngles) :=
      Set.MapsTo.countable_of_injOn (f := id) sub (Set.injOn_id _) h
    uInt (this.of_diff cBad)
  have : Set.Nonempty goodAngles := Set.Infinite.nonempty (fun h => uGood h.countable)
  ‚ü®this.some, (Set.mem_setOf_eq ‚ñ∏ this.some_mem).right‚ü©

-- TODO: how to state this? omega_equiv is only defined on lists,
-- but we have sets; exist labelings? exist lists that become A/B when setified?
theorem high_level_rotate (A : Finset Point) :--(h : Set.Countable A) :
  ‚àÉ (B : Finset Point), omega_equivalence (finset_sort A) (finset_sort B) ‚Üí hasDistinctX B :=
    sorry
    -- ‚àÉ (Œ∏ : ‚Ñù), hasDistinctX $ (rotationMap Œ∏)''A :=
