import Mathlib.Data.Set.Countable
import Mathlib.Data.Real.Basic
import Mathlib.Data.Set.Intervals.IsoIoo
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan
import Geo.SymmetryBreaking

namespace Geo
noncomputable section
open Real Classical

/-- Matrix representing a counterclockwise rotation by `Œ∏`. -/
def Matrix.rotateBy (Œ∏ : ‚Ñù) : Matrix (Fin 2) (Fin 2) ‚Ñù :=
  !![Real.cos Œ∏, -Real.sin Œ∏; Real.sin Œ∏, Real.cos Œ∏]

def rotationMap (Œ∏ : ‚Ñù) : Point ‚Üí‚Çó[‚Ñù] Point :=
  Matrix.toEuclideanLin (Matrix.rotateBy Œ∏)

@[simp]
lemma rotationMap_x (Œ∏ : ‚Ñù) (P : Point) : (rotationMap Œ∏ P).x = cos Œ∏ * P.x - sin Œ∏ * P.y := by
  -- such beautiful formal proofs
  simp [Matrix.vecHead, Matrix.vecTail, rotationMap, Matrix.toEuclideanLin,
    Matrix.toLin', Matrix.rotateBy, Point.x, Point.y]
  ring

@[simp]
lemma rotationMap_y (Œ∏ : ‚Ñù) (P : Point) : (rotationMap Œ∏ P).y = sin Œ∏ * P.x + cos Œ∏ * P.y := by
  simp [Matrix.vecHead, Matrix.vecTail, rotationMap, Matrix.toEuclideanLin,
    Matrix.toLin', Matrix.rotateBy, Point.x, Point.y]

theorem injective_rotationMap (Œ∏ : ‚Ñù) : Function.Injective (rotationMap Œ∏) := by
  apply LinearMap.injective_iff_surjective.mpr
  intro P
  use (rotationMap (-Œ∏)) P
  have := sin_sq_add_cos_sq Œ∏
  ext <;> simp only [rotationMap_x, rotationMap_y, cos_neg, sin_neg]
  linear_combination Point.x P * this
  linear_combination Point.y P * this

/-- `Matrix.rotateBy` as an affine transformation matrix. -/
def Matrix.rotateByAffine (Œ∏ : ‚Ñù) : Matrix (Fin 3) (Fin 3) ‚Ñù :=
  !![Real.cos Œ∏, -Real.sin Œ∏, 0; Real.sin Œ∏, Real.cos Œ∏, 0; 0, 0, 1]

lemma TMatrix.rotateByAffine (Œ∏ : ‚Ñù) : TMatrix (Matrix.rotateByAffine Œ∏) where
  det_pos := by simp [Matrix.det_fin_three, Matrix.rotateByAffine, ‚Üê Real.cos_sub]
  third_row := by simp [Matrix.rotateByAffine]

lemma pt_transform_rotateByAffine (p : Point) : pt_transform p (Matrix.rotateByAffine Œ∏) = rotationMap Œ∏ p := by
  ext <;> simp [pt_transform, Matrix.rotateByAffine]; ring

/-- Given two distinct points `P, Q`,
if there is an angle `Œ∏ ‚àà (-œÄ/2, œÄ/2)` rotating by which results
in their having the same `x` coordinate,
then this angle must be `arctan ((P.x - Q.x)/(P.y - Q.y))`. -/
lemma rotationMap_angle_unique (P Q : Point) : P ‚â† Q ‚Üí
    ‚àÄ Œ∏ ‚àà Set.Ioo (-(œÄ/2)) (œÄ/2), (rotationMap Œ∏ P).x = (rotationMap Œ∏ Q).x ‚Üí
      Œ∏ = Real.arctan ((P.x - Q.x) / (P.y - Q.y)) := by
  intro hne
  intro Œ∏ hŒ∏ heq
  have heq : (P.x - Q.x) * cos Œ∏ = (P.y - Q.y) * sin Œ∏ := by
    rw [rotationMap_x, rotationMap_x] at heq
    linarith
  have poscoscospos : 0 < cos Œ∏ := Real.cos_pos_of_mem_Ioo hŒ∏
  by_cases hy : P.y = Q.y
  . have : (P.x - Q.x) * cos Œ∏ = 0 := by rw [hy] at heq; linarith
    cases mul_eq_zero.mp this
    next hx =>
      exfalso
      have : P.x = Q.x := by linarith
      exact hne (Point.ext this hy)
    . linarith
  . have : P.y - Q.y ‚â† 0 := fun h => hy (by linarith)
    have : (P.x - Q.x) / (P.y - Q.y) = sin Œ∏ / cos Œ∏ := by
      field_simp [heq, div_self this, mul_comm]
    have : (P.x - Q.x) / (P.y - Q.y) = tan Œ∏ := by
      simp [this, tan_eq_sin_div_cos]
    have := congrArg arctan this
    rw [Set.mem_Ioo] at hŒ∏
    rw [arctan_tan hŒ∏.left hŒ∏.right] at this
    rw [this]

open Cardinal in
theorem distinct_rotate_finset (A : Set Point) (h : Set.Countable A) :
    ‚àÉ (Œ∏ : ‚Ñù), (rotationMap Œ∏)''A |>.Pairwise (¬∑.x ‚â† ¬∑.x) :=
  let badAngles := Set.image2 (fun P Q => Real.arctan ((P.x - Q.x) / (P.y - Q.y))) A A
  let goodAngles := { Œ∏ ‚àà Set.Ioo (-(œÄ/2)) (œÄ/2) | (rotationMap Œ∏)''A |>.Pairwise (¬∑.x ‚â† ¬∑.x) }
  have sub : Set.Ioo (-(œÄ/2)) (œÄ/2) \ badAngles ‚äÜ goodAngles := by
    intro Œ∏ hŒ∏
    simp only [Set.mem_setOf_eq, Set.mem_diff, Set.mem_image2, not_exists, not_and] at hŒ∏ ‚ä¢
    have ‚ü®hInt, hArctan‚ü© := hŒ∏; clear hŒ∏
    refine ‚ü®hInt, Set.InjOn.pairwise_ne (Set.InjOn.image_of_comp ?_)‚ü©
    rw [Set.InjOn]
    intro P hP Q hQ rotEq
    dsimp at rotEq
    by_cases hEq : P = Q
    . assumption
    . exfalso
      apply hArctan P hP Q hQ
      rw [rotationMap_angle_unique P Q hEq Œ∏ hInt rotEq]
  have cBad : Set.Countable badAngles := Set.Countable.image2 h h _
  have uInt : #(Set.Ioo (-(œÄ/2)) (œÄ/2)) = ùî† := mk_Ioo_real (neg_lt_self (by positivity))
  have uInt : ¬¨Set.Countable (Set.Ioo (-(œÄ/2)) (œÄ/2)) := by
    rw [‚Üê Cardinal.le_aleph0_iff_set_countable, uInt]
    simp [aleph0_lt_continuum]
  have uGood : ¬¨Set.Countable goodAngles := fun h =>
    have : Set.Countable (Set.Ioo (-(œÄ/2)) (œÄ/2) \ badAngles) :=
      Set.MapsTo.countable_of_injOn (f := id) sub (Set.injOn_id _) h
    uInt (this.of_diff cBad)
  have : Set.Nonempty goodAngles := Set.Infinite.nonempty (fun h => uGood h.countable)
  ‚ü®this.some, (Set.mem_setOf_eq ‚ñ∏ this.some_mem).right‚ü©

theorem distinct_rotate_list (l : List Point) (hDistinct : l.Pairwise (¬∑ ‚â† ¬∑)) :
    ‚àÉ (Œ∏ : ‚Ñù), l.map (rotationMap Œ∏) |>.Pairwise (¬∑.x ‚â† ¬∑.x) := by
  have ‚ü®Œ∏, hŒ∏‚ü© := distinct_rotate_finset l.toFinset (Finset.countable_toSet _)
  use Œ∏
  simp at hŒ∏
  apply List.of_Pairwise_toFinset
  . intro i j hLt hMap
    exfalso
    have : (l.map (rotationMap Œ∏)).length = l.length := l.length_map ..
    apply List.pairwise_iff_get.mp hDistinct ‚ü®i.1, this ‚ñ∏ i.2‚ü© ‚ü®j.1, this ‚ñ∏ j.2‚ü© hLt
    simp only [getElem_fin, List.getElem_eq_get, List.get_map] at hMap
    exact injective_rotationMap Œ∏ hMap
  simpa using hŒ∏

theorem omega_equiv_rotate (l : List Point) (hDistinct : l.Pairwise (¬∑ ‚â† ¬∑)) :
    ‚àÉ (l' : List Point), omega_equivalence l l' ‚àß l'.Pairwise (¬∑.x ‚â† ¬∑.x) := by
  have ‚ü®Œ∏, hŒ∏‚ü© := distinct_rotate_list l hDistinct
  refine ‚ü®_, ?_, hŒ∏‚ü©
  simp_rw [‚Üê funext pt_transform_rotateByAffine]
  apply transform_returns_omega_equivalent
  exact TMatrix.rotateByAffine Œ∏
